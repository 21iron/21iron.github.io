{"pages":[],"posts":[{"title":"Hexo, Github 이용하여 블로그 만들기","text":"[삽질001] Github io 페이지 만들기 Github io 레포지토리 만들기 이 곳으로 들어가면 Github.io 페이지를 만드는 법이 나와있다.(들어가면 내용은 아래와 같다.) 123456$ git clone https://github.com/username/username.github.io$ cd username.github.io$ echo &quot;Hello Hell Joseon&quot; &gt; index.html$ git add --all$ git commit -m &quot;Initial commit&quot;$ git push -u origin master Github에 들어가면 Github.io 레포지토리와 페이지가 생성 되었다. Hexo 블로그 만들기 Hexo 블로그 환경 조성 ㆍ 설치 이 곳으로 들어가면 Hexo 설치에 관한 모든 것들이 있다.(들어가면 핵심 내용은 아래와 같다.) 123456$ cd &lt;username.github.io&gt; // io를 만든 폴더로 위치지정$ npm install -g hexo-cli // Hexo 설치$ hexo init &lt;폴더명&gt; // Hexo 블로그 설치할 폴더$ cd &lt;폴더명 // Hexo 블로그 설치할 폴더로 이동$ npm install // Hexo 블로그 설치$ hexo server // 시연 구동 크롬 웹을 열어, https://localhost:4000에 접속하면 설치된 블로그를 확인할 수 있다. 구경을 다 하면, 터미널에서 ctrl + c로 구경을 그만하자 갈 길이 아직 남았다. 테마 입히기 나의 블로그는 “icarus”라는 테마이다. 클릭하면 설치에 관한 모든 것들이 있다.(들어가면 핵심 내용은 아래와 같다.) 12$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus$ git submodule add https://github.com/ppoffice/hexo-themeicarus.git themes/icarus 코드 에디터를 열어_config.yml라는 파일을 열어본다. 76번줄에 theme : landscpae를 theme : icarus로 변경한다. 1$ hexo server // 시연 구동을 시켜본다 시연 구동이 되지를 않는다. 터미널에서 icarus 전용 _config.yml을 만들었다. 고로 구연시동이 되질 않음 1$ hexo server // 다시 시연 구동 시작 크롬 웹을 통해, https://localhost:4000에 접속하면 테마가 바뀐 블로그를 확인 할 수 있다. 에디터를 통해 블로그 _config.yml과 icarus theme폴더에 있는 _config.yml를 통해 개인화 설정 Github io &amp; Hexo 블로그 합치기 Hexo 블로그 설정 변경코드 에디터를 통해 블로그 _config.yml로 들어가, 아래 내용을 참고 하여 수정하자 1234#16 url : &lt;https://username.github.io/#82 type : git#83 repo : https://github.com/username/username.github.io.git // 여긴 만들자#84 branch : master Github에 올리기이제 터미널로 다시 돌아와 블로그 발사 준비를 하자 123456$ npm install hexo-deployer-git --save // 이건 Git에 배포할 수 있는 설치 파일이다. 필자는 어느 분이 잘못올려서 계속 삽질함, 안될 경우 공식사이트를 찾아보는 습관을 기르자, 혹시 다른 사람이 실수를 할 수 있으니... 믿지말자 아무도 ㅋㅋ$ hexo clean &amp;&amp; hexo deploy --generate // 정리 후 발사 준비$ git add --all$ git commit -m &apos;설명&apos;$ git push origin master // 안되면 &apos;+master&apos; 한번 들어가서 확인을 해보자… 참고 사이트 생활코딩 원격 저장소 만들기 yoeubi : HEXO 블로그 만들기) github page와 hexo를 통해 블로그 만들기 hexo 로 쉽게 나만의 블로그 만들기 with Github pages Hexo+GitHub pages Hexo 시작하기 Hexo 공식 홈페이지 튜토리얼 git 간편 안내서(Git을 모를 때 정말 유익하다…) 하 물론 이거 말고도 삽질은 많았지만 할말하않 이 것도 제대로 올라갈 지 무섭다. (응 지금 또 삽질하고 있다. ^^) 우선 타이틀 한글로 하지 말것. 블로그 창이 좁네요… 다음에 포스팅 할때에는 글자 크기를 작게 해보자…(아니면 다시 삽질해서 블로그 포스팅 칸을 넓히던, 다른 걸로 바꾸던….하하….가시성 제로였네 :-) 진작 말해주지 하하 ) 올리는 순간 까지도 삽질 모르는게 너무 많다.","link":"/2019/04/28/20190428/"},{"title":"190424 Introduction to JavaScript(2/2)","text":"[바코002] 시작하며 코드 하나하나를 적재적소에 쓸 수 있도록 하자. 코드 하나하나를 잘 조합하는 생각을 기르자. 모든 경우의 수를 생각하는 습관을 기르자. 알고리즘에 도움 되는 습관들이다. For구문의 순서를 이해하자. Operators Logical Operators(논리연산자)!NaN : Logical Not Logical Or(||연산자)undefined || true : Or연산자는 왼쪽부터 truhy값을 찾아낸다 truthy값을 찾은 경우, 해당값을 반환한다. 마지막에 도달할 경우, 마지막 값을 돌려준다. Logical And(&amp;&amp;연산자)true &amp;&amp; &quot;&quot; &amp;&amp; 300 : 왼쪽부터 Falsy 값을 찾아나간다. Falsy 값을 찾은 경우, 해당값을 반환한다. 마지막에 도달할 경우, 마지막 값을 반환한다. 1234And연산자, Or연산자 동시에 있을 경우,And연산자 우선 처리true&amp;&amp;true || false&amp;&amp;true Ternary Operator(삼항 조건 연산자)true ? 1:2 : ? 앞 구문이 참, 1 변환 ? 앞 구문이 거짓, 2 변환 Function Basics123456function add(x, y) { var result = x + y; return result;}//Arguments/Parameters (x,y)//Return (return result) 123456789101112function add(x,y){ for(var i = 0; i &lt; 3; i++){ if(i === 1){ return; } else { console.log(i) } }}var b = add();console.log(b); Return Value 함수 실행 결과값을 결정 함수 실행 종료 Control Flow if…else 구문12345678910111213141516171819202122function roll() { return Math.ceil(Math.random() * 6);}function game() { var result = roll(); alert(`결과: ${result}`); // if...else 구문 if (result &gt;= 4) { // 괄호 안의 조건을 만족하면, 즉 결과값이 true 이면 // 이 영역의 코드가 실행된다. alert('당신이 이겼습니다!'); } else { // 위 조건을 만족하지 않으면, 즉 결과값이 false 이면 // 대신 이 영역의 코드가 실행된다. alert('당신이 졌습니다.'); }}game(); For 구문1234567891011// for (초기값 정의; 실행 조건; 갱신) { ... }for (var i = 0; i &lt; 5; i++) { console.log(`현재 i의 값: ${i}`);}console.log('루프가 종료되었습니다.');// for 구문의 순서를 생각해보자// 1. var i = 0; 시작// 2. 실행 조건(i &lt; 5)이 참인지 거짓인지 확인// 3. 함수 구문으로 들어가 실행// 4. for 구문으로 들어와 i++ 갱신을하고// 5. 다시 2번부터 5번까지 반복한다.(샐행조건이 거짓일 때 까지) For 구문의 순서를 잘 이해해야지 더 다양하게 활용 할 수 있다. 예습하자Primitive Reference","link":"/2019/04/29/20190429/"},{"title":"190429 Primitive & Reference","text":"[바코 003] Objects Array Primitive Reference 알아야 할 포인트 시작하며 과제 제출시 질문사항은 Git 설명 부분에 적어줘도 좋음 Method는 개념ㆍ구문ㆍ매개변수ㆍ반환 값을 꼭 확인하자 Objects Object Literal 12345678var something = 'name';var obj = { [something]: 'Ken Huh'};obj.something; // ?obj.name; // ? Dot Notation 1234567var person = {}; person.name = &apos;Ken Huh&apos;;person.age = 36;person.languages = [&apos;Korean&apos;, &apos;English&apos;];console.log(person); Bracket notation JavaScript에서 객체 속성이름이 식별자로 허용되지 않은 문자일 경우에는 Bracket notation을 사용 1person['한국 나이'] = 36; Handling objects delete person.address 'name' in person Method 객체의 속성값을 함수로 지정이 가능하다. 객체의 속성으로 접근 사용하는 함수를 Method라고 일컫는다. Method는 개념ㆍ구문ㆍ매개변수ㆍ반환 값을 꼭 확인하자 알아야할 포인트 객체의 속성값은 문자열로 변환한다. 고로, 변수를 그대로 적용하면 문자열로 바꾸어 버리기 때문에, 만약, 변수를 적용하고 싶으면, 대괄호를 이용한다. [a] 그렇다면 아래는 어떻게 될까? 12345678var ken = 123;var a = 'FirstName';var obj = { a : ken};console.log(obj[a]); Array Primitive타입은 6가지 이다. Boolean, String, Number, Null, Undefined, NaN Reference타입은 1가지 이다. Object 배열은 Object 이다. 배열이 나오면, Object와 Reference를 생각하자. Object는 할당 되어있는 값보다는, 참조값 즉 Reference가 같은지가 중요하다. 123456789var arr1 = [1,2,3];var arr2 = arr1;var arr3 = arr2;var arr4 = arr3arr1.push(5);console.log(arr4) 1234567891011var child1 = { age : 3};var child2 = { age : 5};var mother = { age : 55, childern : [ child1, child2]};child1.age++;child2.age++;console.log(mother.children); 알아야 할 포인트1234567891011121314151617181920212223function updateAge () { this.age++;}var son = { age : 3, growUp: updateAge};var daugther = { age : 7, gorwUp: updateAge};var mother = { age : 38, growUp : updateAge, childeren : [son, daugther]};var father = { age : 38, growUp : updateAge, childeren : [son, daugther]};if(father.age === mother.age){ console.log('동갑!');}if(father.childern === mother.childern){ console.log('동갑!');}if(father.grwoUp === son.growUp){ console.log('동갑!');}var children = mother.childern;mother.childeren = father.childeren;console.log(mother.children === children);","link":"/2019/04/30/20190430/"},{"title":"190422 Introduction to JavaScript(1/2)","text":"[바코001] 시작하며 예의성,겸손함을 잃지 말자(건방 떨고 싶어도 떨 것도 없는게 함정이지만…) 자신의 코딩을 단 한글자를 모르고 쓰면 안된다. 코드는 컴퓨터보다 사람을 위해 써야한다. 가독성 좋게. 코드는 무조건 병적으로 일관성, 통일성을 준수한다. Camel Case를 쓰자 Value 1var 2two // 이 구문은 불가하다(왜일까?) // 변수는 숫자로 시작 할 수 없다. Number === || !== : 3개를 쓰도록 하자 ++a : 구문을 실행 전, a를 증감 a++ : 구문을 실행 후, a를 증감 a+=1 : a = a+1 NaN : Not a Number parseFloat||parseInt : String을 Number로 변환할 때 쓰인다. 12parseFloat(&apos;12.345&apos;);parseInt(&apos;hello&apos;); String 12345678910111213'hello'.length; // ?'hello'.concat('fun', 'javascript'); // ?'6'.repeat(3); // ?'hello javascript'.includes('hello'); // ?'hello javascript'.startsWith('he'); // ?'hello javascript'.endsWith('ript'); // ?'hello javascript'.indexOf('java'); // ?'hello'.slice(2, 4); // ?' hello '.trim(); // ?'hello!fun!javavscript'.split('!'); // ?'hello'.split(''); // ?'Hello JavaScript'.toLowerCase(); // ?'Hello JavaScript'.toUpperCase(); // ? Boolean Truthy : Falsy(8)를 제외한 모든 값 Falsy(8) : undefined, null, 0, -0, NaN, false, '', &quot;&quot; null &amp;&amp; undefined null : 없는 값 / 값이 있는 없는값 / 없는 값을 의도적 할당할 때 쓰임 undefined : 없음 / 할당되어지지 않아서 없음 / 無","link":"/2019/04/28/20190428[2]/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"}],"categories":[{"name":"삽질기록","slug":"삽질기록","link":"/categories/삽질기록/"},{"name":"바코기록","slug":"바코기록","link":"/categories/바코기록/"}]}